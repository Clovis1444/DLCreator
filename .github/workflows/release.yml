name: Release(linux, windows)
on:
    workflow_dispatch:

env:
    PROJECT_NAME: DLCreator
    SOURCE_DIR:   ${{ github.workspace }}
    CLANG_VERSION: 15
    CMAKE_VERSION: 3.25.1
    QT_VERSION: 6.7.2
    # QT_LINUX_ARCH: linux_gcc_64
    # QT_WINDOWS_ARCH: win64_msvc2019_64
    # LINUX_ARTIFACT: DLCreator-linux
    # LINUX_ARTIFACT_FILE: DLCreator-linux.zip
    # WINDOWS_ARTIFACT: DLCreator-windows
    # WINDOWS_ARTIFACT_FILE: DLCreator-windows.zip

jobs:
    build:
        outputs:
          project_version: ${{steps.get_version.outputs.project_version}}
          windows_artifact: ${{matrix.os.artifact[0]}}
          linux_artifact: ${{matrix.os.artifact[1]}}

        strategy:
            matrix:
                os:
                    [
                        { name: "windows", image: "windows-2019", arch: "win64_msvc2019_64", artifact: DLCreator-windows },
                        { name: "linux", image: "ubuntu-20.04", arch: "linux_gcc_64", artifact: DLCreator-linux },
                    ]
            fail-fast: true
        runs-on: ${{ matrix.os.image }}

        steps:

        - name: Checkout repo
          uses: actions/checkout@v4
          with:
            submodules: recursive
      
        - name: Get project version
          if: matrix.os.name == 'linux'
          id: get_version
          run: |
            PROJECT_VER="$(grep "project(DLCreator VERSION" CMakeLists.txt | grep -o '[0-9].[0-9].[0-9]')"
            PROJECT_VER="project_version=$PROJECT_VER"
            echo $PROJECT_VER >> "$GITHUB_OUTPUT"
            echo $PROJECT_VER

        - name: Check if tag is already exists
          if: matrix.os.name == 'linux'
          uses: mukunku/tag-exists-action@v1.6.0
          id: check-tag
          with: 
            tag: v${{steps.get_version.outputs.project_version}}

        # To prevent creating releases with the same version
        - name: Cancel workflow if tag already exists
          if: matrix.os.name == 'linux'
          uses: nick-fields/assert-action@v2
          with:
            expected: "false"
            actual: ${{ steps.check-tag.outputs.exists }}

        - name: Setup Clang
          uses: egor-tensin/setup-clang@v1
          with:
            version: ${{ env.CLANG_VERSION }}
            platform: x64
      
        - name: Setup Ninja
          uses: seanmiddleditch/gha-setup-ninja@v5
      
        - name: Setup CMake
          uses: jwlawson/actions-setup-cmake@v2
          with:
            cmake-version: ${{ env.CMAKE_VERSION }}
        
        - name: Install Qt
          uses: jurplel/install-qt-action@v4
          with:
            version:      ${{ env.QT_VERSION }}
            host:         ${{ matrix.os.name }}
            target:       desktop
            arch:         ${{ matrix.os.arch }}
            dir:          ${{ runner.temp }}
            setup-python: false

        - name: Create build directory
          run:  mkdir ${{ env.SOURCE_DIR }}\\build
        
        - name: Configure project
          run:  cmake --no-warn-unused-cli -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -DCMAKE_C_COMPILER:FILEPATH=clang -DCMAKE_CXX_COMPILER:FILEPATH=clang++ -S${{ env.SOURCE_DIR }} -B${{ env.SOURCE_DIR }}\\build -G Ninja
        
        - name: Build project
          run: cmake --build ${{ env.SOURCE_DIR }}\\build --config Release --target all --

        - name: Deploy project(linux)
          if: matrix.os.name == 'linux'
          run: | 
              wget https://github.com/probonopd/linuxdeployqt/releases/latest/download/linuxdeployqt-continuous-x86_64.AppImage 
              chmod a+x linuxdeployqt-continuous-x86_64.AppImage
              mv linuxdeployqt-continuous-x86_64.AppImage linuxdeployqt.AppImage
              mkdir DLCreator-linux && mv ${{ env.SOURCE_DIR }}/build/DLCreator DLCreator-linux/DLCreator
              ./linuxdeployqt.AppImage DLCreator-linux/DLCreator -always-overwrite

        - name: Deploy project(windows)
          if: matrix.os.name == 'windows'
          # Path to windeployqt.exe depends on QT version and Arch
          run: |
            mkdir DLCreator-windows && mv ${{ env.SOURCE_DIR }}\build\DLCreator.exe DLCreator-windows\DLCreator.exe
            ${{ runner.temp }}\Qt\6.7.2\msvc2019_64\bin\windeployqt.exe DLCreator-windows\DLCreator.exe

        - name: Zip
          run: 7z a -tzip -mx5 -r0 ${{ matrix.os.artifact }}.zip ${{matrix.os.artifact}}

        - name: Upload artifact
          uses: actions/upload-artifact@v4
          with:
            name: ${{matrix.os.artifact}}
            path: ${{matrix.os.artifact}}.zip

    upload_release:
        needs: [build]
        runs-on: ubuntu-latest
        permissions: write-all

        steps:
        
        - name: Download linux artifact
          uses: actions/download-artifact@v4
          with: 
            name: ${{needs.build.outputs.linux_artifact}}

        - name: Download windows artifact
          uses: actions/download-artifact@v4
          with: 
            name: ${{needs.build.outputs.windows_artifact}}

        - name: Create new release
          uses: actions/create-release@v1
          id: release
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: v${{needs.build.outputs.project_version}}
            release_name: ${{env.PROJECT_NAME}} v${{needs.build.outputs.project_version}}
            commitish: ${{github.sha}}
            draft: true

        - name: Upload linux artifact
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.release.outputs.upload_url}}
            asset_path: ${{needs.build.outputs.linux_artifact}}.zip
            asset_name: ${{needs.build.outputs.linux_artifact}}.zip
            asset_content_type: application/zip

        - name: Upload windows artifact
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.release.outputs.upload_url}}
            asset_path: ${{needs.build.outputs.windows_artifact}}.zip
            asset_name: ${{needs.build.outputs.windows_artifact}}.zip
            asset_content_type: application/zip
          